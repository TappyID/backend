package main

import (
	"log"

	"github.com/joho/godotenv"
	"golang.org/x/crypto/bcrypt"
	"gorm.io/gorm"

	"tappyone/internal/config"
	"tappyone/internal/database"
	"tappyone/internal/models"
)

func main() {
	// Carregar vari√°veis de ambiente
	if err := godotenv.Load("../../.env"); err != nil {
		log.Println("Arquivo .env n√£o encontrado, usando vari√°veis do sistema")
	}

	// Carregar configura√ß√£o
	cfg := config.Load()

	// Conectar ao banco de dados
	db, err := database.Connect(cfg.DatabaseURL)
	if err != nil {
		log.Fatal("Falha ao conectar com o banco de dados:", err)
	}

	log.Println("üóëÔ∏è Limpando usu√°rios existentes...")
	
	// PostgreSQL - truncate com cascade
	if err := db.Exec("TRUNCATE TABLE usuarios RESTART IDENTITY CASCADE").Error; err != nil {
		log.Printf("Falha ao truncar, tentando delete: %v", err)
		// Fallback: deletar usu√°rios diretamente
		if err := db.Exec("DELETE FROM usuarios").Error; err != nil {
			log.Printf("Aviso: n√£o foi poss√≠vel limpar usu√°rios: %v", err)
		}
	}
	
	log.Printf("‚úÖ Usu√°rios existentes removidos")
	
	log.Println("‚úÖ Todos os usu√°rios foram removidos!")
	log.Println("üë• Criando novos usu√°rios...")

	// Criar novos usu√°rios
	if err := createNewUsers(db); err != nil {
		log.Fatal("Erro ao criar usu√°rios:", err)
	}

	log.Println("‚úÖ Usu√°rios criados com sucesso!")
	log.Println("")
	log.Println("üîë CREDENCIAIS DE ACESSO:")
	log.Println("=====================================")
	log.Println("üë®‚Äçüíº ADMIN (Willian): willian@crm.tappy.id / Willian123!")
	log.Println("üë®‚Äçüíº ADMIN (Rodrigo): rodrigo@crm.tappy.id / Rodrigo123!")
	log.Println("üë§ ATENDENTE: atendente@crm.tappy.id / Atendente123!")
	log.Println("üì± ASSINANTE: assinante@crm.tappy.id / Assinante123!")
	log.Println("=====================================")
}

func createNewUsers(db *gorm.DB) error {
	users := []struct {
		Nome     string
		Email    string
		Password string
		Tipo     models.TipoUsuario
	}{
		{
			Nome:     "Willian Admin",
			Email:    "willian@crm.tappy.id",
			Password: "Willian123!",
			Tipo:     models.TipoUsuarioAdmin,
		},
		{
			Nome:     "Rodrigo Admin",
			Email:    "rodrigo@crm.tappy.id",
			Password: "Rodrigo123!",
			Tipo:     models.TipoUsuarioAdmin,
		},
		{
			Nome:     "Atendente",
			Email:    "atendente@crm.tappy.id",
			Password: "Atendente123!",
			Tipo:     models.TipoUsuarioAtendenteComercial,
		},
		{
			Nome:     "Assinante",
			Email:    "assinante@crm.tappy.id",
			Password: "Assinante123!",
			Tipo:     models.TipoUsuarioAssinante,
		},
	}

	for _, userData := range users {
		// Hash da senha
		hashedPassword, err := bcrypt.GenerateFromPassword([]byte(userData.Password), bcrypt.DefaultCost)
		if err != nil {
			return err
		}

		// Criar usu√°rio
		telefone := "+55 11 99999-9999"
		user := models.Usuario{
			Nome:     userData.Nome,
			Email:    userData.Email,
			Senha:    string(hashedPassword),
			Tipo:     userData.Tipo,
			Ativo:    true,
			Telefone: &telefone,
		}

		if err := db.Create(&user).Error; err != nil {
			return err
		}

		log.Printf("‚úÖ Usu√°rio criado: %s (%s)", userData.Email, userData.Tipo)
	}

	return nil
}
